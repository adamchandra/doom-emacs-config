
** Assorted Functions

#+begin_src emacs-lisp

(defun my/flycheck-executable-find (executable)
  "Resolve EXECUTABLE to a full path.
Like `executable-find', but supports relative paths.

Attempts invoking `executable-find' first; if that returns nil,
and EXECUTABLE contains a directory component, expands to a full
path and tries invoking `executable-find' again.
"
  ;; file-name-directory returns non-nil iff the given path has a
  ;; directory component.
  (or
   (executable-find-prefer-node-modules executable)
   (executable-find executable)
   (when (file-name-directory executable)
     (executable-find (expand-file-name executable))))
  )
#+end_src

#+begin_src emacs-lisp
(defun executable-find-prefer-node-modules (command)
  (interactive)
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (cmd (and root
                   (expand-file-name
                    (concat "node_modules/.bin/" command)
                    root))))
    (when (and cmd (file-executable-p cmd))
      cmd)
    )
  )
#+end_src

Find either a regular .eslintrc.js file or one specially made for emacs usage
#+begin_src emacs-lisp
(defun find-eslint-config ()
  " "
  (interactive)
  (let* (
         (config-file ".eslintrc.js")
         (config-file-alt ".eslintrc.emacs.js")
         (root-norm (locate-dominating-file
                     (or (buffer-file-name) default-directory)
                     config-file))
         (root-alt (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    config-file-alt))
         (config (if root-alt
                     (expand-file-name config-file-alt root-alt)
                   (expand-file-name config-file root-norm)
                   ))
         )
    (message (concat "found config:" config))
    config
    ));

#+end_src

** Spacemacs Copypasta
Things I missed whem moving from spacemacs -> doom
#+begin_src emacs-lisp

(defun spacemacs/alternate-window ()
  "Switch back and forth between current and last window in the current frame."
  (interactive)
  (let (;; switch to first window previously shown in this frame
        (prev-window (get-mru-window nil t t)))
    ;; Check window was not found successfully
    (unless prev-window (user-error "Last window not found."))
    (select-window prev-window)))


(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the current window.

If `spacemacs-layouts-restrict-spc-tab' is `t' then this only switches between
the current layouts buffers."
  (interactive)
  (cl-destructuring-bind (buf start pos)
      (if (bound-and-true-p spacemacs-layouts-restrict-spc-tab)
          (let ((buffer-list (persp-buffer-list))
                (my-buffer (window-buffer window)))
            ;; find buffer of the same persp in window
            (seq-find (lambda (it) ;; predicate
                        (and (not (eq (car it) my-buffer))
                             (member (car it) buffer-list)))
                      (window-prev-buffers)
                      ;; default if found none
                      (list nil nil nil)))
        (or (cl-find (window-buffer window) (window-prev-buffers)
                     :key #'car :test-not #'eq)
            (list (other-buffer) nil nil)))
    (if (not buf)
        (message "Last buffer not found.")
      (set-window-buffer-start-and-point window buf start pos)
      )))


  (defun spacemacs/helm-M-x-fuzzy-matching ()
    "Helm M-x with fuzzy matching enabled"
    (interactive)
    (let ((completion-styles completion-styles))
      (add-to-list 'completion-styles `,(if (version< emacs-version "27") 'helm-flex 'flex) t)
      (call-interactively 'helm-M-x)))

  (defun my-split-window-horizontally()
      (interactive)
      (doom/window-maximize-buffer)
      (split-window-right)
      (balance-windows)
      ;; (spacemacs/window-split-single-column)
    )


;; (company-bbdb company-semantic company-cmake company-capf company-clang company-files
;; (company-dabbrev-code company-gtags company-etags company-keywords)
;; company-oddmuse company-dabbrev)

;; for
;; remove (setq company-backends (delete 'company-dabbrev company-backends))
;; add (add-to-list 'company-backends 'company-dabbrev)
(defun company-my-setup ()
  (when (boundp 'company-backends)
    (make-local-variable 'company-backends)
    (setq company-backends
          '(company-capf
            (:separate
             company-dabbrev
             company-dabbrev-code
             company-yasnippet
             company-files
             ;;;;; company-ispell
             ))
          )
    ))


#+end_src

#+begin_src emacs-lisp
    (defun spacemacs/scala-join-line ()
      "Adapt `scala-indent:join-line' to behave more like evil's line join.

      `scala-indent:join-line' acts like the vanilla `join-line',
      joining the current line with the previous one. The vimmy way is
      to join the current line with the next.

      Try to move to the subsequent line and then join. Then manually move
      point to the position of the join."
        (interactive)
        (let (join-pos)
          (save-excursion
            (goto-char (line-end-position))
            (unless (eobp)
              (forward-line)
              (call-interactively 'scala-indent:join-line)
              (setq join-pos (point))))

          (when join-pos
            (goto-char join-pos))))


    (defun find-my-init-files ()
      (interactive)
      (find-file-existing *acs-layer-path* )
      )

    (defun find-my-theme-file ()
      "find the directory containing private init files"
      (interactive)
      (progn
        (find-file-existing *theme-path*)
        ))

  (defun enhanced-save-buffer ()
    (interactive)
    (progn
      (delete-trailing-whitespace)
      ;; (pcase (file-name-extension buffer-file-name)
      ;;               ("ts" (if (fboundp 'prettier-js) (prettier-js)))
      ;;               ("tsx" (if (fboundp 'prettier-js) (prettier-js)))
      ;;               (_ ()))
      (save-buffer)
      ))

#+end_src

#+begin_src emacs-lisp
(setq *adams-config-ran* nil)

(defun disable-autosave ()
  (progn
    (setq auto-save-buffers-enhanced-activity-flag nil)
    ))

(defun enable-autosave ()
  (progn
    (setq auto-save-buffers-enhanced-activity-flag t)
    ))



(defun adamchandra/final-config ()
  (interactive)
  (if (not *adams-config-ran*)
      (progn
        (setq *adams-config-ran* t)
        (message "adamchandra/final-config running")

        (company-my-setup)
        ;; for
        ;; -- ;; (add-hook 'dired-mode-hook #'my-dired-config)

        ;; -- ;; (require 'org-config)
        ;; -- ;; (require 'ts-config)
        ;; -- ;; (require 'translate-funcs)
        ;; -- ;; (require 'livedown)

        ;; -- ;; (config-markdown-mode)

        ;; -- ;; ;; prevent .#filname.xx files (which cause a problem w/ensime)
        ;; -- ;; (setq create-lockfiles nil)

        ;; -- ;; (spacemacs/set-leader-keys
        ;; -- ;;   "bk" 'spacemacs/kill-this-buffer
        ;; -- ;;   )


        (add-hook! evil-insert-state-entry 'disable-autosave)
        (add-hook! evil-insert-state-exit 'enable-autosave)
        ;; -- ;; ;; (add-hook 'evil-insert-state-exit-hook 'autosave-file-buffer)
        ;; -- ;; (setq dotspacemacs-auto-save-file-location nil)

        ;; -- ;; (setq history-delete-duplicates t)

        ;; -- ;; (spacemacs/toggle-smooth-scrolling-off)

        ;; -- ;; (setq truncate-lines t)

        ;; -- ;; (remove-hook 'prog-mode-hook 'auto-complete-mode)
        ;; -- ;; (remove-hook 'prog-mode-hook 'rainbow-delimiters-mode)


        ;; -- ;; (menu-bar-mode -1)
        ;; -- ;; (tool-bar-mode -1)
        ;; -- ;; (scroll-bar-mode -1)

        ;; -- ;; ;; Defined in `helm-ag.el'.
        ;; -- ;; ;; Ignore patterns for `ag'. This parameters are specified as --ignore
        ;; -- ;; ;; (setq helm-ag-ignore-patterns nil)
        ;; -- ;; (setq helm-ag-use-grep-ignore-list t)
        ;; -- ;; ;; Use .agignore where is at project root if it exists.
        ;; -- ;; (setq helm-ag-use-agignore t)

        ;; -- ;; ;; (setq browse-url-browser-function 'browse-url-generic
        ;; -- ;; ;;       browse-url-generic-program "google-chrome")
        ;; -- ;; ;; (setq browse-url-browser-function 'browse-url-generic
        ;; -- ;; ;;       browse-url-generic-program "firefox")

        ;; -- ;; (setq browse-url-browser-function
        ;; -- ;;       '(("^mailto:" . browse-url-mail)
        ;; -- ;;         ("." . browse-url-firefox))
        ;; -- ;;       )

        ;; -- ;; (setq browse-url-firefox-program "firefox")

        ;; -- ;; ;; defined in `grep.el'.
        ;; -- ;; (setq grep-find-ignored-directories
        ;; -- ;;       '("target" ".ensime_cache"
        ;; -- ;;         "SCCS" "RCS" "CVS" "MCVS" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" ;; defaults
        ;; -- ;;         ))

        ;; -- ;; (setq grep-find-ignored-files
        ;; -- ;;       '(".#*" "*.lock" "*.gen" "*.si" "*.cfs" "*.cfe" "*.hi" "*.o" "*~" "*.bin"
        ;; -- ;;         "*.lbin" "*.so" "*.a" "*.ln" "*.blg" "*.bbl" "*.elc" "*.lof" "*.glo"
        ;; -- ;;         "*.idx" "*.lot" "*.fmt" "*.tfm" "*.class" "*.fas" "*.lib" "*.mem"
        ;; -- ;;         "*.x86f" "*.sparcf" "*.dfsl" "*.pfsl" "*.d64fsl" "*.p64fsl"
        ;; -- ;;         "*.lx64fsl" "*.lx32fsl" "*.dx64fsl" "*.dx32fsl" "*.fx64fsl" "*.fx32fsl"
        ;; -- ;;         "*.sx64fsl" "*.sx32fsl" "*.wx64fsl" "*.wx32fsl" "*.fasl" "*.ufsl"
        ;; -- ;;         "*.fsl" "*.dxl" "*.lo" "*.la" "*.gmo" "*.mo" "*.toc" "*.aux"
        ;; -- ;;         "*.cp" "*.fn" "*.ky" "*.pg" "*.tp" "*.vr" "*.cps" "*.fns"
        ;; -- ;;         "*.kys" "*.pgs" "*.tps" "*.vrs" "*.pyc" "*.pyo"
        ;; -- ;;         ))



        ;; -- ;; (remove-hook 'js2-mode-hook 'skewer-mode)
        ;; -- ;; (remove-hook 'js2-mode-hook 'js2-imenu-extras-mode)

        ;; -- ;; (eval-after-load 'tern
        ;; -- ;;      '(progn
        ;; -- ;;         (require 'tern-auto-complete)
        ;; -- ;;         (tern-ac-setup)))

        ;; -- ;; ;; (setq javascript-disable-tern-port-files t)

        ;; -- ;; (add-hook 'js2-mode-hook
        ;; -- ;;           (defun my-js2-mode-setup ()
        ;; -- ;;             ;; (require 'tern)
        ;; -- ;;             (flycheck-mode t)
        ;; -- ;;             (auto-complete-mode t)
        ;; -- ;;             (when (executable-find "eslint")
        ;; -- ;;               (flycheck-select-checker 'javascript-eslint))
        ;; -- ;;             ))

        ;; -- ;; (global-display-line-numbers-mode)
        ;; -- ;; (spacemacs/toggle-smartparens-globally-on)
        ;; -- ;; (show-smartparens-global-mode)

        ;; -- ;; (global-auto-revert-mode)
        ;; -- ;; (setq auto-revert-verbose t)

        ;; -- ;; ;; (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
        ;; -- ;; ;; (global-visual-fill-column-mode)

        ;; -- ;; (fringe-mode '(24 . 14))
        ;; -- ;; (setq visual-line-fringe-indicators '(left-curly-arrow nil))

        ;; -- ;; ;; Warning (yasnippet): ‘Snippet’ modified buffer in a backquote expression.
        ;; -- ;; ;; To hide this warning, add (yasnippet backquote-change) to ‘warning-suppress-types’.
        ;; -- ;; (setq warning-suppress-types '(yasnippet backquote-change))

        ;; -- ;; (setq bookmark-default-file "~/.emacs.d/bookmarks")  ;;define file to use.
        ;; -- ;; (setq bookmark-save-flag 1)  ;save bookmarks to .emacs.bmk after each entry

        (message "adamchandra/final-config (done) running")

        )

    (progn
      (message "adamchandra/final-config *not* running, already ran")
      )
    )
  )

        #+end_src
