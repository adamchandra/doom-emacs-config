#+title: Doom Emacs Configuration
#+author: saunders
#+date: {{{modification-time(%Y-%m-%d %H:%M, t)}}} ;{{{timezone}}}, {{{git-rev}}}
#+macro: timezone (eval (substring (shell-command-to-string "date +%Z") 0 -1))
#+macro: git-rev (eval (format "@@html:<a href=\"https://github.com/adamchandra/emacs-config/commit/%1$s\" style=\"text-decoration: none\"><code style=\"padding: 0; color: var(--text-light); font-size: inherit; opacity: 0.7\">%1$s</code></a>@@@@latex:\\href{https://github.com/tecosaur/emacs-config/commit/%1$s}{%1$s}@@" (substring (shell-command-to-string "git rev-parse --short HEAD") 0 -1)))
#+property: header-args:emacs-lisp :tangle "build~/config.el" :cache yes :results silent :comments link :mkdirp yes
#+property: header-args:shell :tangle "build~/setup.sh" :mkdirp yes
#+property: header-args :tangle no :results silent
#+html_head: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>

#+begin_export html
<h2>ACS Doom Emacs Config</h2>
#+end_export

#+begin_export latex
\newpage % because the contents are multi-page, this looks better
#+end_export

* Tangle Output Preambles
** Config.el
   Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]] for more info).
#+begin_src emacs-lisp :comments no
  ;;; config.el -*- lexical-binding: t; -*-
#+end_src

** Setup.sh
#+begin_src shell :exports none :comments no :tangle-mode (identity #o755)
  #!/bin/bash
#+end_src

* Personal Information
#+begin_src emacs-lisp
  (setq user-full-name "adamchandra"
        user-mail-address "adamchandra@gmail.com")

#+end_src

*** Visual Settings
**** Font Face
#+begin_src emacs-lisp
  (setq doom-font (font-spec :family "JetBrains Mono" :size 24)
        doom-big-font (font-spec :family "JetBrains Mono" :size 36)
        doom-variable-pitch-font (font-spec :family "Ubuntu" :size 24)
        doom-serif-font (font-spec :family "Bitstream Vera Sans" :weight 'light))
#+end_src

**** Theme and modeline
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "themes")
  (setq doom-theme 'leuven-solar)
  ;; (setq doom-theme 'doom-solarized-light)
  ;; (delq! t custom-theme-load-path)
#+end_src


** Module Loading (creates init.el)
#+INCLUDE: "./org.d/init-modules.org"


** Package loading
:PROPERTIES:
:header-args:emacs-lisp: :tangle "build~/packages.el" :comments no
:END:
This file shouldn't be byte compiled.
#+begin_src emacs-lisp :tangle "build~/packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src
*** Loading instructions

#+begin_src emacs-lisp
(package! terminal-here)
(package! auto-save-buffers-enhanced)

;; disable evil-escape jk
(package! evil-escape :disable t)


;;; Scala packages
(package! scala-mode)
(package! sbt-mode)
(package! lsp-metals)
(package! lsp-ui)
(package! company-lsp)
(package! posframe)
;; (package! dapmode)
(package! yasnippet)

#+end_src

#+INCLUDE: "./org.d/lsp-config.org::*Packages"
#+INCLUDE: "./org.d/org-config.org::*Packages"


** Package Config
#+begin_src emacs-lisp

(use-package! terminal-here
  :defer t
  )
(use-package! auto-save-buffers-enhanced
  :config (progn
    (auto-save-buffers-enhanced t)
    (auto-save-buffers-enhanced-include-only-checkout-path nil)
    (setq auto-save-buffers-enhanced-interval 0.5) ;; seconds
    (setq auto-save-buffers-enhanced-quiet-save-p t)
    ;; (setq auto-save-buffers-enhanced-include-regexps '(".+"))
     ;; (setq auto-save-buffers-enhanced-exclude-regexps '("^not-save-file" "\\.ignore$"))

            )
  )
#+end_src


** Assorted functions
#+INCLUDE: "./org.d/misc-funcs.org"

** Lang
#+INCLUDE: "./org.d/lsp-config.org::*Config"
#+INCLUDE: "./org.d/org-config.org::*Config"


** Keymap Defs
#+INCLUDE: "./org.d/keymap-config.org"
#+INCLUDE: "./org.d/lsp-config.org::*Keybindings"
#+INCLUDE: "./org.d/flycheck-config.org::*Keybindings"


** Modeline Config
?? Modeline is cutting off right side icons

*** Modeline definitions are here:
doom-core/.local/straight/repos/doom-modeline/doom-modeline.el
doom-core/.local/straight/repos/doom-modeline/doom-modeline-core.el

*** Display Icons
(all-the-icons-insert-icons-for 'octicon 0.8) ;; icons + scaling factor
(all-the-icons-insert-icons-for 'faicon 0.8)

#+begin_src emacs-lisp

;; Given that modeline clips the right side, move the important stuff leftwards
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '( workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info checker)
    '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info  major-mode process vcs buffer-encoding))

  (setq
   doom-modeline-icon t
   doom-modeline-buffer-file-name-style 'relative-to-project
   )
  )

#+end_src
** Run Final Config
#+begin_src emacs-lisp

(load-file (expand-file-name "./org.d/scala-config.el" doom-private-dir))
(load-file (expand-file-name "./org.d/ts-tide-config.el" doom-private-dir))

(adamchandra/final-config)
;; Indent

;; Copied and modified from doom/modules/config/+evil-keybindings
(map!
 :m [tab] (cmds! (and (bound-and-true-p yas-minor-mode)
                      (evil-visual-state-p)
                      (or (eq evil-visual-selection 'line)
                          (not (memq (char-after) (list ?\( ?\[ ?\{ ?\} ?\] ?\))))))
                 #'yas-insert-snippet
                 (and (featurep! :editor fold)
                      (save-excursion (end-of-line) (invisible-p (point))))
                 #'+fold/toggle
                 ;; Fixes #4548: without this, this tab keybind overrides
                 ;; mode-local ones for modes that don't have an evil
                 ;; keybinding scheme or users who don't have :editor (evil
                 ;; +everywhere) enabled.
                 (doom-lookup-key [tab] (list (current-local-map)))
                 it
                 t #'indent-for-tab-command
                 )
 )

#+end_src

** Make company mode never include ispell
#+begin_src emacs-lisp
;;  company-files
;;  company-ispell
;;; form

(defun my/company-backend-setup ()
  (interactive)
  ;; (message "running my/company-backend-setup")
  (make-local-variable 'company-backends)
  (setq company-backends
        '(company-capf
          ;; (:separate company-dabbrev company-dabbrev-code company-yasnippet)
          )
        )
  )

(add-hook! '(lsp-mode-hook)
           :append
           #'my/company-backend-setup
           )
(setq
 ivy-use-virtual-buffers t
 ivy-count-format ""
 ;; no regexp by default
 ivy-initial-inputs-alist nil
 ;; allow input not in order
 ivy-re-builders-alist '((t   . ivy--regex-ignore-order))
 )

           #+end_src
