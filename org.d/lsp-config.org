* LSP Config

** Packages

#+begin_src emacs-lisp

(package! lsp-mode)

#+end_src

** Config

#+begin_src emacs-lisp

(use-package! lsp-mode
  :hook ((
          ;;  c-mode          ; clangd
          ;; c++-mode        ; clangd
          ;; c-or-c++-mode   ; clangd
          scala-mode      ;
          ;; js-mode         ; ts-ls (tsserver wrapper)
          ;; js-jsx-mode     ; ts-ls (tsserver wrapper)
          ;; typescript-mode ; ts-ls (tsserver wrapper)
          python-mode     ; mspyls
          web-mode
          ) . lsp)
  )

(after! lsp-mode
  (message "after lsp")
  (setq lsp-file-watch-ignored-directories
        (append lsp-file-watch-ignored-directories
                '(; SCM tools
                  "[/\\\\]\\.bsp\\'"
                  "[/\\\\].*corpus\\.d\\'"
                  )
                )
        )

  (setq
   lsp-prefer-capf t
   ;; ;; lsp-log-io t ; enable debug log - can be a huge performance hit
   ;; lsp-disabled-clients '(eslint)
   ;; lsp-treemacs-sync-mode 1
   )
  (message "after lsp/prefer-capf")

  (setq lsp-ui-sideline-enable t                ;;   "Whether or not to enable ‘lsp-ui-sideline’."
        ;; lsp-ui-sideline-ignore-duplicate nil    ;;   "Control to ignore duplicates when there is a same symbol with the same contents."
        ;; lsp-ui-sideline-show-symbol t           ;;   "When t, show the symbol name on the right of the information."
        ;; lsp-ui-sideline-show-hover t            ;;   "Whether to show hover messages in sideline."
        ;; lsp-ui-sideline-show-diagnostics t      ;;   "Whether to show diagnostics messages in sideline."
        ;; lsp-ui-sideline-show-code-actions t     ;;   "Whether to show code actions in sideline."
        ;; lsp-ui-sideline-update-mode 'line       ;;   "Define the mode for updating sideline information.
        ;; lsp-ui-sideline-delay 0.2               ;;   "Number of seconds to wait before showing sideline."
        ;; lsp-ui-sideline-diagnostic-max-lines 20 ;;   "Maximum number of lines to show of diagnostics in sideline."
        );

  (setq lsp-ui-doc-enable t              ;;   "Whether or not to enable lsp-ui-doc."
        lsp-ui-doc-header nil            ;;   "Whether or not to enable the header which display the symbol string."
        lsp-ui-doc-include-signature t   ;;   "Whether or not to include the object signature/type in the frame."
        lsp-ui-doc-position 'at-point      ;;   "Where to display the doc. top|bottom|at-point
        lsp-ui-doc-border "blue"        ;;   "Border color of the frame."
        lsp-ui-doc-max-width 150         ;;   "Maximum number of columns of the frame."
        lsp-ui-doc-max-height 30         ;;   "Maximum number of lines in the frame."
        lsp-ui-doc-use-childframe t      ;;   "Whether to display documentation in a child-frame or the current frame.
        lsp-ui-doc-use-webkit t        ;;   "Whether to display documentation in a WebKit widget in a child-frame.
        lsp-ui-doc-delay 1.0             ;;   "Number of seconds before showing the doc."
        )

  (setq lsp-ui-flycheck-enable t            ;;   "Whether or not to enable ‘lsp-ui-flycheck’."
        lsp-ui-flycheck-live-reporting t      ;;   "If non-nil, diagnostics in buffer will be reported as soon as possible.
        lsp-ui-flycheck-list-position 'bottom ;;   "Position where `lsp-ui-flycheck-list' will show diagnostics for the whole workspace. (bottom|right)
        )

  (setq lsp-ui-imenu-enable nil
        lsp-ui-imenu-kind-position 'top                 ;;   "Where to show the entries kind."
        lsp-ui-imenu-colors '("deep sky blue" "green3") ;;   "Color list to cycle through for entry groups."
        )

  (setq lsp-ui-peek-enable t           ;;   "Whether or not to enable ‘lsp-ui-peek’."
        lsp-ui-peek-peek-height 20     ;;   "Height of the peek code."
        lsp-ui-peek-list-width 50      ;;   "Width of the right panel."
        lsp-ui-peek-fontify 'on-demand ;;   "Whether to fontify chunks of code (use semantics colors).
        lsp-ui-peek-always-show nil    ;;   "Show the peek view even if there is only 1 cross reference.
        )

  )

  #+end_src


** Keybindings

#+begin_src emacs-lisp
(map! :map lsp-mode-map
      :localleader
      (:prefix ("e" . "errors"))
      :desc "Error List"                                  "ee"  #'lsp-ui-flycheck-list

      (:prefix ("g" . "Goto"))
      :desc "Goto declarations of symbol under point"     "gd"  #'lsp-find-declaration
      :desc "Goto definitions of symbol"                  "gf"  #'lsp-find-definition
      :desc "Goto implementations of symbol under point"  "gi"  #'lsp-find-implementation
      :desc "Goto references to symbol under point"       "gr"  #'lsp-find-references
      :desc "Goto type definitions of symbol under point" "gt"  #'lsp-find-type-definition


      (:prefix ("v" . "View"))
      :desc "Switch to log View IO logs for workspace"     "vio"  #'lsp-switch-to-io-log-buffer
      :desc "Describe thing at point"                      "vpp"  #'lsp-describe-thing-at-point
      :desc "Highlight references to symbol under point"   "vrp"    #'lsp-document-highlight
      :desc "Toggle Code Lenses"                           "vl"  #'lsp-lens-mode

      (:prefix ("r" . "Run"))
      :desc "Execute code action"                          "ra"   #'lsp-execute-code-action
      :desc "Rename symbol under point"                    "rn"    #'lsp-rename

      (:prefix ("rf" . "Run/Format"))
      :desc "Format buffer"                                "rff"  #'lsp-format-buffer
      :desc "Format region or line"                        "rfr"  #'lsp-format-region

      (:prefix ("s" . "Server"))
      :desc "Shutdown language server"                     "sq"    #'lsp-shutdown-workspace
      :desc "Execute (Restart) language server"            "sr"  #'lsp-restart-workspace


      ;; :desc "" "udd"  #'lsp-ui-doc-show
      ;; :desc "" "upr"  #'lsp-ui-peek-find-references
      ;; :desc "" "upd"  #'lsp-ui-peek-find-definitions
      )

(evil-define-key 'normal lsp-mode-map
  (kbd "M-.") 'lsp-find-definition
  )

(map! :map lsp-ui-flycheck-list-mode-map
      :desc "Quit Error List"             :neg "q"  #'lsp-ui-flycheck-list--quit
      )
(map! :map lsp-ui-flycheck-list-mode-map
      :leader
      :desc "Quit Error List"             "q"  #'lsp-ui-flycheck-list--quit
      )

;; (evil-define-key 'normal tide-project-errors-mode-map
;;   (kbd "RET") 'tide-goto-error
;;   )

#+end_src
